// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetcoreSaas.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetcoreSaas.WebApi.Migrations
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20220114185644_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LinkId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ContractActivity");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ContractEmployee");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("UserId");

                    b.ToTable("ContractMember");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Common.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KeyValues")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("Table")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Links.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProviderWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientWorkspaceId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByWorkspaceId");

                    b.HasIndex("ProviderWorkspaceId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Links.LinkInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByWorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedLinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("InviteeIsProvider")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("WorkspaceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CreatedByWorkspaceId");

                    b.HasIndex("CreatedLinkId")
                        .IsUnique();

                    b.ToTable("LinkInvitations");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Included")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriptionProductId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TranslateInFrontend")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionProductId");

                    b.ToTable("SubscriptionFeatures");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BillingPeriod")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PriceBefore")
                        .HasColumnType("numeric");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<Guid>("SubscriptionProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("TrialDays")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionProductId");

                    b.ToTable("SubscriptionPrices");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Badge")
                        .HasColumnType("text");

                    b.Property<bool>("ContactUs")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MaxLinks")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStorage")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWorkspaces")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MonthlyContracts")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionProducts");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("LogoDarkmode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Subdomain")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionCustomerId")
                        .HasColumnType("text");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b810ec42-c688-4e16-864d-f1b09806d1a1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Subdomain = "admin",
                            Uuid = new Guid("e2b9a8de-2196-11eb-adc1-0242ac120002")
                        });
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantJoinSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Link")
                        .HasColumnType("uuid");

                    b.Property<bool>("LinkActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("PublicUrl")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireAcceptance")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantJoinSettings");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaxLinks")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStorage")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWorkspaces")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MonthlyContracts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SubscriptionPriceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubscriptionServiceId")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPriceId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantProducts");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatbotCustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("InvitationLink")
                        .HasColumnType("uuid");

                    b.Property<int>("Joined")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d30efef-8d62-4aa1-8598-1c3047d7273a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailNotifications = true,
                            Joined = 0,
                            Role = 0,
                            Status = 2,
                            TenantId = new Guid("b810ec42-c688-4e16-864d-f1b09806d1a1"),
                            UserId = new Guid("3079388a-481a-4ef0-8d77-a383fa848ef4")
                        });
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DefaultTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<int>("LoginType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3079388a-481a-4ef0-8d77-a383fa848ef4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@saascourses.net",
                            FirstName = "Admin",
                            Gender = 'M',
                            LastName = "User",
                            LoginType = 0,
                            Password = "AfwDXicb6hl3vfvur4d/br5mdr50YGcpfrWXOvL0T9/kswE1EUXAd0AoF9YDCf7+wQ==",
                            Token = new Guid("f8334685-0a3f-4df1-b6f5-15f133b65ffe"),
                            Type = 0
                        });
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessMainActivity")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64f4764f-d065-4ec7-a9d3-67d08f8286ac"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            Name = "Default Workspace",
                            TenantId = new Guid("b810ec42-c688-4e16-864d-f1b09806d1a1"),
                            Type = 0
                        });
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Workspaces.WorkspaceUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("WorkspaceUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3878607d-34e8-4a24-a0be-9ff1a0aa6845"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Default = false,
                            Role = 0,
                            UserId = new Guid("3079388a-481a-4ef0-8d77-a383fa848ef4"),
                            WorkspaceId = new Guid("64f4764f-d065-4ec7-a9d3-67d08f8286ac")
                        });
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.Contract", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Links.Link", "Link")
                        .WithMany("Contracts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractActivity", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.App.Contracts.Contract", "Contract")
                        .WithMany("Activity")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractEmployee", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.App.Contracts.Contract", null)
                        .WithMany("Employees")
                        .HasForeignKey("ContractId");

                    b.HasOne("NetcoreSaas.Domain.Models.App.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.ContractMember", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.App.Contracts.Contract", "Contract")
                        .WithMany("Members")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Employees.Employee", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Tenant");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Links.Link", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "ClientWorkspace")
                        .WithMany()
                        .HasForeignKey("ClientWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "CreatedByWorkspace")
                        .WithMany()
                        .HasForeignKey("CreatedByWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "ProviderWorkspace")
                        .WithMany()
                        .HasForeignKey("ProviderWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientWorkspace");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CreatedByWorkspace");

                    b.Navigation("ProviderWorkspace");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Links.LinkInvitation", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "CreatedByWorkspace")
                        .WithMany()
                        .HasForeignKey("CreatedByWorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Links.Link", "CreatedLink")
                        .WithOne("LinkInvitation")
                        .HasForeignKey("NetcoreSaas.Domain.Models.Core.Links.LinkInvitation", "CreatedLinkId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CreatedByWorkspace");

                    b.Navigation("CreatedLink");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionFeature", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionProduct", "SubscriptionProduct")
                        .WithMany("Features")
                        .HasForeignKey("SubscriptionProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionProduct");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionPrice", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionProduct", "SubscriptionProduct")
                        .WithMany("Prices")
                        .HasForeignKey("SubscriptionProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionProduct");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantJoinSettings", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "Tenant")
                        .WithOne("TenantJoinSettings")
                        .HasForeignKey("NetcoreSaas.Domain.Models.Core.Tenants.TenantJoinSettings", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantProduct", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionPrice", "SubscriptionPrice")
                        .WithMany()
                        .HasForeignKey("SubscriptionPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "Tenant")
                        .WithMany("Products")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscriptionPrice");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.TenantUser", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "User")
                        .WithMany("Tenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Users.User", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "DefaultTenant")
                        .WithMany()
                        .HasForeignKey("DefaultTenantId");

                    b.Navigation("DefaultTenant");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", "Tenant")
                        .WithMany("Workspaces")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Workspaces.WorkspaceUser", b =>
                {
                    b.HasOne("NetcoreSaas.Domain.Models.Core.Users.User", "User")
                        .WithMany("Workspaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", "Workspace")
                        .WithMany("Users")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.App.Contracts.Contract", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("Employees");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Links.Link", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("LinkInvitation");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Subscriptions.SubscriptionProduct", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Tenants.Tenant", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TenantJoinSettings");

                    b.Navigation("Users");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Users.User", b =>
                {
                    b.Navigation("Tenants");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("NetcoreSaas.Domain.Models.Core.Workspaces.Workspace", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
